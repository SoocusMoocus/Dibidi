import os
import json
import random
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

BOT_TOKEN = os.getenv('BOT_TOKEN')
DATA_FILE = 'user_data.json'

# Possible pill outcomes
PILL_RESULTS = [
    "–ö–û–ü–ê–ô",
    "–õ–ò–°–ò–ß–ö–ê",
    "–¢–†–£–ë–ê",
    "–ü–ê–•–ê–ô",
    "–ë–û–ë–û–ñ–ò–†",
    "–®–ê–ù–¢–†–ê–ü–ê",
    "–ì–ê–í–ù–û–ñ–ò–†"
]

def load_data():
    try:
        with open(DATA_FILE, 'r') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {'users': {}, 'total_dug': 0, 'total_sold': 0, 'pills_used': 0}

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f)

async def dig_dog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = load_data()
    user_id = str(user.id)
    
    if user_id not in data['users']:
        await start(update, context)
        return
    
    data['users'][user_id]['dug_count'] += 1
    data['total_dug'] += 1
    save_data(data)
    await update.message.reply_text(f"–°–æ–±–∞–∫–∞ –≤—ã–∫–æ–ø–∞–Ω–∞! üêï (–í—Å–µ–≥–æ: {data['users'][user_id]['dug_count']})")

async def sell_dog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = load_data()
    user_id = str(user.id)
    
    if data['users'][user_id]['dug_count'] > 0:
        data['users'][user_id]['dug_count'] -= 1
        data['users'][user_id]['sold_count'] += 1
        data['total_sold'] += 1
        pills_gained = random.randint(3, 5)
        data['users'][user_id]['pills'] += pills_gained
        save_data(data)
        await update.message.reply_text(
            f"–°–æ–±–∞–∫–∞ –ø—Ä–æ–¥–∞–Ω–∞! üí∞ –ü–æ–ª—É—á–µ–Ω–æ {pills_gained} —Ç–∞–±–ª–µ—Ç–æ–∫.\n"
            f"–¢–∞–±–ª–µ—Ç–æ–∫: {data['users'][user_id]['pills']}\n"
            f"–°–æ–±–∞–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {data['users'][user_id]['dug_count']}"
        )
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±–∞–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!")

async def use_pill(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = load_data()
    user_id = str(user.id)
    
    if data['users'][user_id]['pills'] > 0:
        data['users'][user_id]['pills'] -= 1
        data['users'][user_id]['pills_used'] += 1
        data['pills_used'] += 1
        save_data(data)
        
        result = random.choice(PILL_RESULTS)
        await update.message.reply_text(
            f"üíä –í–∞–º –≤—ã–ø–∞–ª: {result}\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å —Ç–∞–±–ª–µ—Ç–æ–∫: {data['users'][user_id]['pills']}"
        )
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–±–ª–µ—Ç–æ–∫!")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = load_data()
    user_id = str(user.id)
    
    stats_message = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—ã–∫–æ–ø–∞–ª–∏ —Å–æ–±–∞–∫: {data['users'][user_id]['dug_count']}\n"
        f"–ü—Ä–æ–¥–∞–Ω–æ —Å–æ–±–∞–∫: {data['users'][user_id]['sold_count']}\n"
        f"–¢–∞–±–ª–µ—Ç–æ–∫: {data['users'][user_id]['pills']}\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–∞–±–ª–µ—Ç–æ–∫: {data['users'][user_id]['pills_used']}\n"
        f"–í—Å–µ–≥–æ –≤—ã–∫–æ–ø–∞–Ω–æ: {data['total_dug']}\n"
        f"–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ: {data['total_sold']}\n"
        f"–í—Å–µ–≥–æ —Ç–∞–±–ª–µ—Ç–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {data['pills_used']}"
    )
    await update.message.reply_text(stats_message)

async def show_top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = load_data()
    users = data['users']
    
    top_diggers = sorted(
        users.items(),
        key=lambda item: item[1]['dug_count'],
        reverse=True
    )[:10]
    
    leaderboard = "üèÜ –¢–æ–ø –∫–æ–ø–∞—Ç–µ–ª–µ–π:\n"
    for i, (user_id, user_data) in enumerate(top_diggers, 1):
        leaderboard += f"{i}. {user_data['username']}: {user_data['dug_count']} —Å–æ–±–∞–∫\n"
    
    await update.message.reply_text(leaderboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = load_data()
    
    if str(user.id) not in data['users']:
        data['users'][str(user.id)] = {
            'dug_count': 0,
            'sold_count': 0,
            'pills': 0,
            'username': user.username or user.first_name,
            'pills_used': 0
        }
        save_data(data)
    
    help_text = (
        "üêï –ë–æ–±–æ–∂–∏—Ä –ë–æ—Ç üêï\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/dig - –í—ã–∫–æ–ø–∞—Ç—å —Å–æ–±–∞–∫—É\n"
        "/sell - –ü—Ä–æ–¥–∞—Ç—å —Å–æ–±–∞–∫—É (3-5 —Ç–∞–±–ª–µ—Ç–æ–∫)\n"
        "/pill - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É (—Å–ª—É—á–∞–π–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç)\n"
        "/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/top - –¢–æ–ø –∫–æ–ø–∞—Ç–µ–ª–µ–π\n"
        "/help - –ü–æ–º–æ—â—å"
    )
    await update.message.reply_text(help_text)

if __name__ == '__main__':
    if not BOT_TOKEN:
        print("Error: BOT_TOKEN not set!")
        exit(1)
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Command handlers
    application.add_handler(CommandHandler(["start", "help"], start))
    application.add_handler(CommandHandler("dig", dig_dog))
    application.add_handler(CommandHandler("sell", sell_dog))
    application.add_handler(CommandHandler("pill", use_pill))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("top", show_top))
    
    print("Bot started with all functions properly defined")
    application.run_polling()
